{"version":3,"sources":["components/Join/Join.component.jsx","components/InfoBar/InfoBar.component.jsx","components/Input/Input.component.jsx","components/Message/Message.component.jsx","components/MessagesContainer/MessagesContainer.component.jsx","components/Chat/Chat.component.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","formControl","minWidth","textAlign","selectEmpty","marginTop","spacing","background","Join","useState","name","room","user","setUser","classes","className","type","placeholder","onChange","e","target","value","FormControl","Select","displayEmpty","inputProps","MenuItem","to","onClick","preventDefault","InfoBar","href","Input","message","setMessage","sendMessage","onKeyPress","key","Message","text","isSentByCurrentUser","trimmedName","trim","toLowerCase","ReactEmoji","emojify","MessagesContainer","socket","messages","map","i","Chat","location","messageList","setMessageList","useEffect","querystring","parse","search","io","emit","error","alert","off","on","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.7676b1ad.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Join.style.scss\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    // margin: theme.spacing(1),\n    minWidth: \"100%\",\n    textAlign: \"left\",\n    // padding: \"10px\",\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n    background: \"white\",\n  },\n}));\n\nfunction Join() {\n  const [user, setUser] = useState({\n    name: \"\",\n    room: \"A\",\n  });\n\n  const classes = useStyles();\n\n  return (\n    <div className=\"Join\">\n      <div className=\"joinInnerContainer\">\n        <h1 className=\"heading\">Chat</h1>\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"Name\"\n            className=\"joinInput\"\n            onChange={(e) => {\n              setUser({ ...user, name: e.target.value });\n            }}\n          />\n        </div>\n        <div>\n          <FormControl className={classes.formControl}>\n            <Select\n              value={user.room}\n              onChange={(e) => {\n                setUser({ ...user, room: e.target.value });\n              }}\n              displayEmpty\n              className={classes.selectEmpty}\n              inputProps={{ \"aria-label\": \"Without label\" }}\n            >\n              <MenuItem value={\"A\"}>Room A</MenuItem>\n              <MenuItem value={\"B\"}>Room B</MenuItem>\n              <MenuItem value={\"C\"}>Room C</MenuItem>\n            </Select>\n          </FormControl>\n\n          {/* <input\n            type=\"text\"\n            placeholder=\"Room\"\n            className=\"joinInput mt-20\"\n            onChange={(e) => {\n              setUser({ ...user, room: e.target.value });\n            }}\n          /> */}\n        </div>\n        <Link\n          to={`chat?name=${user.name}&room=${user.room}`}\n          // 只有在name和room有值時才會submit\n          onClick={(e) =>\n            !user.name || !user.room ? e.preventDefault() : null\n          }\n        >\n          <button className=\"button mt-20\" type=\"submit\">\n            Sign in\n          </button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Join;\n","import React from \"react\";\nimport \"./InfoBar.style.scss\";\n\nfunction InfoBar({ room }) {\n  return (\n    <div className=\"InfoBar\">\n      <div className=\"leftInnerContainer\">\n        <h3>{room}</h3>\n      </div>\n      <div className=\"rightInnerContainer\">\n        <a href=\"/\">\n          <i className=\"far fa-times-circle\"></i>\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default InfoBar;\n","import React from \"react\";\nimport \"./Input.style.scss\";\n\nfunction Input({ message, setMessage, sendMessage }) {\n  return (\n    <form className=\"Input\">\n      <input\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Type a message...\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        onKeyPress={(e) => (e.key === \"Enter\" ? sendMessage(e) : null)}\n      />\n\n      <button className=\"sendButton\" onClick={(e) => sendMessage(e)}>\n        Send\n      </button>\n    </form>\n  );\n}\n\nexport default Input;\n","import React from \"react\";\nimport \"./Message.style.scss\";\nimport ReactEmoji from \"react-emoji\";\n\nfunction Message({ message: { user, text }, name }) {\n  let isSentByCurrentUser = false;\n\n  const trimmedName = name.trim().toLowerCase();\n\n  if (user === trimmedName) {\n    isSentByCurrentUser = true;\n  }\n\n  return isSentByCurrentUser ? (\n    <div className=\"Message justifyEnd\">\n      <p className=\"sentText pr-10\">{trimmedName}</p>\n      <div className=\"messageBox backgroundBlue\">\n        <p className=\"messageText colorWhite\">{ReactEmoji.emojify(text)}</p>\n      </div>\n    </div>\n  ) : (\n    <div className=\"Message justifyStart\">\n      <div className=\"messageBox backgroundLight\">\n        <p className=\"messageText colorDark\">{ReactEmoji.emojify(text)}</p>\n      </div>\n      <p className=\"sentText pl-10\">{user}</p>\n    </div>\n  );\n}\n\nexport default Message;\n","import React from \"react\";\nimport \"./MessagesContainer.style.scss\";\n\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport Message from \"../Message/Message.component\";\n\nfunction MessagesContainer({ messages, name }) {\n  return (\n    <ScrollToBottom className=\"MessagesContainer\">\n      {messages.map((message, i) => (\n        <div key={i}>\n          <Message message={message} name={name} />\n        </div>\n      ))}\n    </ScrollToBottom>\n  );\n}\n\nexport default MessagesContainer;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Chat.style.scss\";\nimport querystring from \"query-string\";\nimport io from \"socket.io-client\";\nimport InfoBar from \"../InfoBar/InfoBar.component\";\nimport Input from \"../Input/Input.component\";\nimport MessagesContainer from \"../MessagesContainer/MessagesContainer.component\";\n\nlet socket;\n\nfunction Chat({ location }) {\n  const [user, setUser] = useState({\n    name: \"\",\n    room: \"\",\n  });\n  const [message, setMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const ENDPOINT = \"localhost:5000\";\n\n  // --------進入聊天視窗後，向server發送請求：加入--------\n  useEffect(() => {\n    // 1-1 取得url中的user資訊並放到state中\n    const { name, room } = querystring.parse(location.search);\n    setUser({ name: name, room: room });\n\n    // 1-2 向server發送請求：加入，順帶附上name跟room\n    socket = io(ENDPOINT);\n    socket.emit(\"join\", { name, room }, (error) => {\n      if (error) {\n        alert(error);\n      }\n    });\n\n    // 1-3 離開時向server發送請求：disconnect\n    return () => {\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n\n  // --------處理server傳送過來的發文要求--------\n  useEffect(() => {\n    socket.on(\"message\", (message) => {\n      setMessageList([...messageList, message]);\n    });\n  }, [messageList]);\n\n  // --------Send鍵按下後，向server發送請求：Po文--------\n  const sendMessage = (e) => {\n    e.preventDefault();\n    if (message) {\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\n    }\n  };\n\n  return (\n    <div className=\"Chat\">\n      <div className=\"ChatContainer\">\n        <InfoBar room={user.room} />\n        <MessagesContainer messages={messageList} name={user.name} />\n        <Input\n          message={message}\n          setMessage={setMessage}\n          sendMessage={sendMessage}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from \"react\";\n\nimport \"./styles/base/overall.scss\";\nimport { Route, Switch } from \"react-router\";\nimport Join from \"./components/Join/Join.component\";\nimport Chat from \"./components/Chat/Chat.component\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={Join}></Route>\n        <Route path=\"/chat\" component={Chat}></Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}